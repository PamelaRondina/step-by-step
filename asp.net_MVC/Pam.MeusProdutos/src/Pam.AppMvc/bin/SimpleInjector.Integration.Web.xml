<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SimpleInjector.Integration.Web</name>
    </assembly>
    <members>
        <member name="T:SimpleInjector.Integration.Web.SimpleInjectorHttpModule">
            <summary>
            Simple Injector web integration HTTP Module. This module is registered automatically by ASP.NET when
            the assembly of this class is included in the application's bin folder. The module will trigger the
            disposing of created instances that are flagged as needing to be disposed at the end of the web
            request.
            </summary>
        </member>
        <member name="M:SimpleInjector.Integration.Web.SimpleInjectorHttpModule.System#Web#IHttpModule#Init(System.Web.HttpApplication)">
            <summary>Initializes a module and prepares it to handle requests.</summary>
            <param name="context">An <see cref="T:System.Web.HttpApplication"/> that provides access to the methods,
            properties, and events common to all application objects within an ASP.NET application.</param>
        </member>
        <member name="M:SimpleInjector.Integration.Web.SimpleInjectorHttpModule.System#Web#IHttpModule#Dispose">
            <summary>
            Disposes of the resources (other than memory) used by the module that implements
            <see cref="T:System.Web.IHttpModule"/>.
            </summary>
        </member>
        <member name="T:SimpleInjector.Integration.Web.SimpleInjectorWebInitializer">
            <summary>
            Pre application start code.
            </summary>
        </member>
        <member name="M:SimpleInjector.Integration.Web.SimpleInjectorWebInitializer.Initialize">
            <summary>Registers an HttpModule that allows disposing instances that are registered as
            Per Web Request.</summary>
        </member>
        <member name="T:SimpleInjector.Integration.Web.WebRequestLifestyle">
            <summary>
            Defines a lifestyle that caches instances during the execution of a single HTTP Web Request.
            Unless explicitly stated otherwise, instances created by this lifestyle will be disposed at the end
            of the web request.
            </summary>
            <example>
            The following example shows the usage of the <b>WebRequestLifestyle</b> class:
            <code lang="cs"><![CDATA[
            var container = new Container();
            container.Options.DefaultScopedLifestyle = new WebRequestLifestyle();
            container.Register<IUnitOfWork, EntityFrameworkUnitOfWork>(Lifestyle.Scoped);
            ]]></code>
            </example>
        </member>
        <member name="M:SimpleInjector.Integration.Web.WebRequestLifestyle.#ctor">
            <summary>Initializes a new instance of the <see cref="T:SimpleInjector.Integration.Web.WebRequestLifestyle"/> class. The instance
            will ensure that created and cached instance will be disposed after the execution of the web
            request ended and when the created object implements <see cref="T:System.IDisposable"/>.</summary>
        </member>
        <member name="M:SimpleInjector.Integration.Web.WebRequestLifestyle.GetCurrentScopeCore(SimpleInjector.Container)">
            <summary>
            Returns the current <see cref="T:SimpleInjector.Scope"/> for this lifestyle and the given
            <paramref name="container"/>, or null when this method is executed outside the context of a scope.
            </summary>
            <param name="container">The container instance that is related to the scope to return.</param>
            <returns>A <see cref="T:SimpleInjector.Scope"/> instance or null when there is no scope active in this context.</returns>
        </member>
        <member name="M:SimpleInjector.Integration.Web.WebRequestLifestyle.CreateCurrentScopeProvider(SimpleInjector.Container)">
            <summary>
            Creates a delegate that upon invocation return the current <see cref="T:SimpleInjector.Scope"/> for this
            lifestyle and the given <paramref name="container"/>, or null when the delegate is executed outside
            the context of such scope.
            </summary>
            <param name="container">The container for which the delegate gets created.</param>
            <returns>A <see cref="T:System.Func`1"/> delegate. This method never returns null.</returns>
        </member>
    </members>
</doc>
