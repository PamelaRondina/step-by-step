-- CRIAR TABELA
CREATE TABLE cadastro_clientes
(
	ID INT,
    CPF VARCHAR(11),
    NOME VARCHAR(150),   
    ENDERECO VARCHAR(250),
    BAIRRO VARCHAR(100),
    CIDADE VARCHAR(100),
    ESTADO VARCHAR(2),
    CEP VARCHAR(8),
    IDADE SMALLINT,
    SEXO VARCHAR(1),
    LIMITE_CREDITO FLOAT,
    VOLUME_COMPRA FLOAT,
    PRIMEIRA_COMPRA BIT(1),
    DATA_NASCIMENTO DATE)

CREATE TABLE VENDEDORES
(
	ID INT,
    NOME VARCHAR(100),
    PERCENTUAL_COMISSAO FLOAT,
    DATA_ADMISSAO DATE,
    FERIAS BIT)

-- INCLUIR PRIMARY KEY
ALTER TABLE VENDEDORES ADD CONSTRAINT PK_VENDEDORES PRIMARY KEY (ID);
ALTER TABLE CADASTRO_CLIENTES ADD PRIMARY KEY (CPF);
ALTER TABLE CADASTRO_CLIENTES ADD PRIMARY KEY (CPF);


-- ALTERAR REGISTROS DA TABELA
UPDATE PRODUTOS SET EMBALAGEM = 'Garrafa'  WHERE ID = '1078680';
UPDATE VENDEDORES SET PERCENTUAL_COMISSAO = 0.11 WHERE ID = '00236';
UPDATE VENDEDORES SET NOME = 'José Geraldo da Fonseca Junior' WHERE ID = '00233';
UPDATE VENDEDORES SET FERIAS = 0 WHERE ID = '00235';
UPDATE PRODUTOS SET SABOR = 'Cítricos' WHERE SABOR = 'Limão';

-- ADICIONAR CAMPO/COLUNA
ALTER TABLE CADASTRO_CLIENTES ADD COLUMN (DATA_NASCIMENTO DATE);

-- DELETAR REGISTROS
DELETE 
DELETE FROM VENDEDORES WHERE ID = 00238;

-- EXCLUIR TABELA
-- DROP TABLE PRODUTOS;
-- DROP TABLE vendedores;	
-- DROP TABLE CADASTRO_CLIENTES;

-- NOME FANTASIA PARA O CAMPO (AS)
SELECT CPF AS CPF_CLIENTE, NOME AS NOME_CLIENTE FROM CADASTRO_CLIENTES;

-- SELECIONAR QUANTOS CAMPOS DESEJÁVEIS NA ORDEM DE CAMPO ESCOLHIDO (ORDER BY)
SELECT ID, NOME FROM CADASTRO_CLIENTES ORDER BY NOME;

-- SELECIONAR UM LIMITE ESPECIFICO (LIMIT)
SELECT ID, NOME FROM CADASTRO_CLIENTES LIMIT 1;

-- SELECIONAR REGISTROS 
SELECT * FROM VENDEDORES WHERE NOME = 'Claudia Morais';

-- SELECIONAR REGISTROS > < = <> <diferente>
SELECT * FROM CADASTRO_CLIENTES WHERE ID = 1;
SELECT * FROM CADASTRO_CLIENTES WHERE ID < 3;
SELECT * FROM VENDEDORES WHERE PERCENTUAL_COMISSAO > 0.10;
SELECT * FROM CADASTRO_CLIENTES WHERE ID >= 2;
SELECT * FROM CADASTRO_CLIENTES WHERE ID <> 1;

-- SELECIONAR VALORES ENTRE (BETWEEN)
SELECT * FROM MODELO_TESTE WHERE DATA_NASCIMENTO BETWEEN '01/01/79' AND '01/01/22';

--NOT não aparece o que estou puxando
SELECT * FROM MODELO_TESTE WHERE NOT (DATA_NASCIMENTO = '19/10/1985' AND NOME = 'João Nascimento'); 

-- SELECIONADO DATAS
SELECT * FROM VENDEDORES WHERE DATA_ADMISSAO < '1985-10-19';
SELECT * FROM VENDEDORES WHERE DATA_ADMISSAO > '1985-10-19';
SELECT * FROM VENDEDORES WHERE DATA_ADMISSAO = '1985-10-19';
SELECT * FROM VENDEDORES WHERE DATA_ADMISSAO <> '1985-10-19';
SELECT * FROM CADASTRO_CLIENTES WHERE YEAR (DATA_NASCIMENTO) = 2000;
SELECT * FROM CADASTRO_CLIENTES WHERE MONTH (DATA_NASCIMENTO) = 03;
SELECT * FROM CADASTRO_CLIENTES WHERE DAY (DATA_NASCIMENTO) = 12;
SELECT * FROM VENDEDORES WHERE FERIAS = 1 AND YEAR (DATA_ADMISSAO) < 2016;


--visualizar operações lógicas AND, OR e IN
SELECT * FROM MODELO_TESTE WHERE ID > 1 AND ID < 3;
SELECT * FROM MODELO_TESTE WHERE ID >= 1 AND ID <= 3;
SELECT * FROM MODELO_TESTE WHERE ESTADO = 'RJ' OR ESTADO = 'SP';
SELECT * FROM MODELO_TESTE WHERE ESTADO IN ('RJ', 'MG');

--LIKE
--lozalizar uma parte de um texto - LIKE '%texto', '%texto%', 'texto%'.
--'%texto'  (o resultado será o algo antes do texto - ex: Caetano Bruno)
--'%texto%' (o resultado será dos dois formatos + o texto sozinho)
--'texto%'  (o resultado será texto antes de algo - ex: Bruno Caetano)'
SELECT * FROM MODELO_TESTE WHERE NOME LIKE '%Bruno%';

--DISTINCT 
-- Visualizar resultados sem repetição (quais são as embalagens com líquido sabor uva?)
SELECT DISTINCT EMBALAGEM FROM produtos WHERE SABOR = 'Uva';

--ROWNUM (NÃO EXECUTADO!)
-- Escolho a quantidade de itens que a tabela deve informar
SELECT ROWNUM, TP. * FROM produtos TP
SELECT ROWNUM, TP.* FROM produtos TP;
-- LISTAR AS 10 PRIMEIRAS VENDAS DO DIA 01/10/17
SELECT * FROM NOTAS_FISCAIS WHERE DATA_VENDA = TO_DATE('2017-01-01','YYYY-MM-DD') AND ROWNUM <= 10;

-- ORDER BY ASC
-- organiza DO MENOR para o MAIOR (Ascendente)
SELECT * FROM vendedores ORDER BY NOME;
SELECT * FROM VENDEDORES ORDER BY  NOME ASC;

-- ORDER BY DESC
-- organiza do MAIOR para o MENOR (Descendente)
SELECT * FROM vendedores ORDER BY NOME DESC;

--GROUP BY
-- SE POSSUIR 'ORDER BY' A 'GROUP BY' DEVE VIR ANTES
-- SUM (soma), AVG (média), MAX (máximo), MIN (mínimo), COUNT(CONTA)

SELECT CIDADE, SUM(IDADE) FROM cadastro_clientes GROUP BY CIDADE ORDER BY CIDADE;

-- QUAIS SÃO OS PRODUTOS MAIS CAROS?
SELECT EMBALAGEM, MAX(PRECO_LISTA) FROM produtos GROUP BY EMBALAGEM;

-- HAVING
-- VEM DEPOIS DO GROUP BY, É UTILIZADO COMO UM FILTRO
SELECT EMBALAGEM, MAX(PRECO_LISTA) AS MAIOR_PRECO FROM produtos
WHERE PRECO_LISTA >= 10
GROUP BY EMBALAGEM
HAVING MAX(PRECO_LISTA) >=5;

-- VISUALIZAR TABELAS
SELECT * FROM PRODUTOS;
SELECT * FROM VENDEDORES;
SELECT * FROM CADASTRO_CLIENTES;

COMMIT;